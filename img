#!/bin/bash
###############################################################################
# img: Launcher for the Docker version of img from https://github.com/genuinetools/img
#      A standalone, daemon-less, unprivileged Dockerfile and OCI compatible
#      container image builder.
#      The launcher also adds some extra utility like a --cacert option
#
# Source: https://github.com/sourcesimian/bin 
# License: https://github.com/sourcesimian/bin/blob/main/LICENSE
###############################################################################
set -e
VOLUME=img_state

abspath() {
    FILE=${1:?FILE}

    cd $(dirname $FILE)
    echo $PWD/$(basename $FILE)
}

unset HELP

RUN_OPTS=("--rm" "-i")
[ -t 1 ] && RUN_OPTS+=("-t")
RUN_OPTS+=("--volume" "$(pwd):/home/user/src:ro")
RUN_OPTS+=("--workdir" "/home/user/src")
RUN_OPTS+=("--volume" "${HOME}/.docker:/root/.docker:ro")
RUN_OPTS+=("--security-opt" "seccomp=unconfined")
RUN_OPTS+=("--security-opt" "apparmor=unconfined")

ARGS=()

while [ $# -gt 0 ]; do
    if [ "$1" = "--help" -o "$1" = "-h" ]; then
        HELP=true
    elif [ "$1" = "--purge-state" ]; then
        if docker inspect ${VOLUME} >/dev/null 2>&1; then
            docker volume rm ${VOLUME}
        fi
        shift
        continue
    fi

    if [ "$1" = "--cacert" ]; then
        T=$(abspath $2)
        if [ -f  "$T" ]; then
            echo "Using extra CA: $2"
        else
            echo "Extra CS not found: $2" >&2
            exit 1
        fi
        RUN_OPTS+=("--volume" "$T:/etc/ssl/certs/ca.crt:ro")
        shift
    elif [ "$1" = "-s" -o "$1" = "--state" ]; then
        T=$(abspath $2)
        if [ -d  "$T" ]; then
            echo "Using custom state volume: $2" >&2
        else
            echo "Custom state dir does not exist: $2" >&2
            exit 1
        fi
        CUSTOM_STATE=true
        RUN_OPTS+=("--volume" "$T:/home/user/.local/share/img:rw")
        shift
    else
        ARGS+=($1)
    fi
    shift
done

if [ ! -n "$CUSTOM_STATE" -a ! -n "$HELP" ]; then
    if ! docker inspect ${VOLUME} >/dev/null 2>&1; then
        docker volume create ${VOLUME} >/dev/null
        docker run -i --rm \
            -v ${VOLUME}:/state \
            --workdir /state \
            alpine /bin/sh -c "mkdir -p /state/img; chmod 777 /state/img; chown 1000:1000 /state/img"
    fi

    echo "Using docker volume to store state: $VOLUME" >&2
    RUN_OPTS+=("--volume" "$VOLUME:/home/user/.local/share:rw")
fi

case "${ARGS[0]}" in
    "shell")
        docker run "${RUN_OPTS[@]}" --entrypoint /bin/sh r.j3ss.co/img "${ARGS[@]:1}"
        ;;
    *)
        docker run "${RUN_OPTS[@]}" r.j3ss.co/img "${ARGS[@]}"
        ;;
esac

if [ -n "$HELP" -a "${ARGS}" == "--help" -o -z "${ARGS}" ]; then
    cat <<EOF

Extra Commands:
  shell              Launch shell in img container with state volume mounted
EOF
fi

if [ -n "$HELP" -o -z "${ARGS}" ]; then
    cat <<EOF

Extra Global Flags:
  --cacert  string   CA cert file to verify remote hosts
  --purge-state      Delete the docker volume (${VOLUME}) that holds the img state

Home page: https://github.com/genuinetools/img/blob/master/README.md
EOF
fi
