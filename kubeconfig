#!/bin/bash
###############################################################################
# kubeconfig: Easily switch between your Kubernetes clusters
#
# This is a BASH shell function which manages the KUBECONFIG environment
# variable, so this script needs to be sourced into your environment
# (via ~/.bashrc) and given a short name of your choosing, e.g.:
#     source <...>/kubeconfig
#     function kc() {       # Choosing the short as "kc"
#       kubeconfig "${@}"
#     }
#
# Usage:
#   kubeconfig list
#   kubeconfig cluster
#   kubeconfig <cluster>
#   kubeconfig <cluster> [cmd ...]
#
# To add references to config files outside ~/.kube/, customise KUBECONFIG_PATH
# like this:
#     export KUBECONFIG_PATH=~/.kube:<extra path>
#
# Source: https://github.com/sourcesimian/bin
# License: https://github.com/sourcesimian/bin/blob/main/LICENSE
###############################################################################

function kubeconfig() {
    local NAME=kubeconfig
    local QUICK_SELECT_URL=https://raw.githubusercontent.com/sourcesimian/bin/main/quick-select
    local QUICK_SELECT_TMP=/tmp/quick-select

    function list_kubeconfigs() {
        local PATHS
        local CMD
        CMD=(read -r)
        if [ -n "$ZSH_VERSION" ]; then
            CMD+=(-A)
        else
            CMD+=(-a)
        fi
        IFS=':' "${CMD[@]}" PATHS <<< "${KUBECONFIG_PATH:-~/.kube}"
        for P in "${PATHS[@]}"; do
            for F in $(grep -l "clusters:" "$P"/* 2>/dev/null); do
                echo "$F $(basename $F)"
            done
        done
    }

    function list() {
        list_kubeconfigs | awk '{print $2}'
    }

    function is_config() {
        [ -z "$1" ] && return 1
        grep -q "^${1:?Required CONFIG}$" <(list)
    }

    function clear_config() {
        unset KUBECONFIG
    }

    function set_config() {
        local CONFIG=${1:?Required CONFIG}
        export KUBECONFIG=$(list_kubeconfigs | grep "$CONFIG " | awk '{print $1}')
    }

    function cluster() {
        local RET=$(grep "^$KUBECONFIG " <(list_kubeconfigs) | awk '{print $2}')
        if [ -z "$RET" ]; then
            return 1
        fi
        echo ${RET}
    }

    function help() {
        echo "Usage:"
        echo "  $NAME list"
        echo "  $NAME cluster"
        echo "  $NAME <cluster>"
        echo "  $NAME <cluster> [cmd ...]"
    }

    function run() {
        if [ -n "$1" ]; then
            "${@}"
        fi
    }

    function setup() {
        local CONFIG=${1}

        if [ -z "$CONFIG" ]; then
            local VALUE=/tmp/kubeconfig-select-value
            if ! QUICK_SELECT=$(command -v quick-select); then
                if [ ! -e "$QUICK_SELECT_TMP" ]; then
                    echo "# Trying to download quick-select to $QUICK_SELECT_TMP"
                    if curl -ks -o "$QUICK_SELECT_TMP" "$QUICK_SELECT_URL"; then
                        chmod +x "$QUICK_SELECT_TMP"
                    else
                        echo "# Unable to find or install quick-select" >&2
                        return 1
                    fi
                fi
                QUICK_SELECT=$QUICK_SELECT_TMP
            fi
            if "$QUICK_SELECT" -t "# Select Kubernetes cluster:" -p "Type to match>" <(list) -v "$VALUE"; then
                set_config "$(cat $VALUE)"
                echo "# Set KUBECONFIG=$KUBECONFIG"
                return 0
            fi
            echo "! Kubernetes cluster not selected"
            clear_config
            return 1
        else
            if is_config "$CONFIG"; then
                set_config "$CONFIG"
                run "${@:2}"
            else
                echo "! Invalid Kubernetes cluster: $CONFIG"
                return 1
            fi
        fi
    }

    case "$1" in
        "list") list ;;
        "cluster") cluster ;;
        "--help") help ;;
        *) setup "${@}" ;;
    esac
}
